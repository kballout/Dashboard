mixin general(settings, data, conv3)
    form#generalForm(name = 'generalForm', action='/servers/' + guild.id + '/general', method='POST')  
        .row
            .col-2
                .container
                    h2 #{settings[0].term}
                    p.small Summary: #{settings[0].description}.
                    p.small#currExRate(style={'font-style': 'italic'}) Currently: #{conv3}%
                    hr
                    label(for='exchange') Exchange Rate:
                    input#exchange(name = 'exchange', type='number', input='exchange', min= '0', step = 0.1) 
            .col-2
                .container
                    h2 #{settings[1].term}
                    p.small Summary: #{settings[1].description}.
                    p.small#currMaxOffenses(style={'font-style': 'italic'}) Currently: #{data['Max Offenses']}
                    hr
                    label(for='maxOffenses') Maximum Offenses:
                    input#maxOffenses(name = 'maxOffenses', type='number', input='maxOffenses', min = '1')    
            .col-2
                .container
                    h2 #{settings[2].term}
                    p.small Summary: #{settings[2].description}.
                    p.small#currDailyChallenges(style={'font-style': 'italic'}) Currently: #{data['Daily Challenges']}
                    hr
                    label(for='dailyChallenges') Daily Challenges:
                    input#dailyChallenges(name = 'dailyChallenges', type='number', input='dailyChallenges', min = '0')     
            .col-2
                .container
                    h2 #{settings[3].term}
                    p.small Summary: #{settings[3].description}.
                    p.small#currOffensesBonus(style={'font-style': 'italic'}) Currently: #{data['Offenses Bonus']}
                    hr
                    label(for='offensesBonus') Bonus Amount:
                    input#offensesBonus(name = 'offensesBonus', type='number', input='offensesBonus', min = '0', step = 0.1)
            .col-2
                .container
                    h2 #{settings[7].term}
                    p.small Summary: #{settings[7].description}.
                    p.small#currExchangeBonus(style={'font-style': 'italic'}) Currently: #{data['Exchange Bonus']}
                    hr
                    label(for='exchangeBonus') Bonus Amount:
                    input#exchangeBonus(name = 'exchangeBonus', type='number', input='exchangeBonus', min = '0', step = 0.1)
            .col-2
                .container
                    h2 #{settings[8].term}
                    p.small Summary: #{settings[8].description}.
                    p.small#currPointsBonus(style={'font-style': 'italic'}) Currently: #{data['Points Bonus']}
                    hr
                    label(for='pointsBonus') Bonus Amount:
                    input#pointsBonus(name = 'pointsBonus', type='number', input='pointsBonus', min = '0', step = 0.1)  
            .col-2
                .container
                    h2 #{settings[9].term}
                    p.small Summary: #{settings[9].description}.
                    p.small#currStreakBonus(style={'font-style': 'italic'}) Currently: #{data['Streak Bonus']}
                    hr
                    label(for='streakBonus') Bonus Amount:
                    input#streakBonus(name = 'streakBonus', type='number', input='streakBonus', min = '0', step = 0.1)        
            .col-2
                .container
                    h2 #{settings[4].term}
                    p.small Summary: #{settings[4].description}.
                    p.small#currLevel1Buyer(style={'font-style': 'italic'}) Currently: #{data['Buyer 1 Level']}
                    hr
                    label(for='level1Buyer') Level 1 Buyer:
                    input#level1Buyer(name = 'level1Buyer', type='number', input='level1Buyer', min = '1')      
            .col-2
                .container
                    h2 #{settings[5].term}
                    p.small Summary: #{settings[5].description}.
                    p.small#currLevel2Buyer(style={'font-style': 'italic'}) Currently: #{data['Buyer 2 Level']}
                    hr
                    label(for='level2Buyer') Level 2 Buyer:
                    input#level2Buyer(name = 'level2Buyer', type='number', input='level2Buyer', min = '1')      
            .col-2(style={'align-content': 'center'})
                .container
                    h2 #{settings[6].term}
                    p.small Summary: #{settings[6].description}.
                    p.small#currLevel3Buyer(style={'font-style': 'italic'}) Currently: #{data['Buyer 3 Level']}
                    hr
                    label(for='level3Buyer') Level 3 Buyer:
                    input#level3Buyer(name = 'level3Buyer', type='number', input='level3Buyer', min = '1')
        input(type='submit', value = 'save') 
                
mixin time(settings, data, conv1, conv2)
    form#timeForm(name = 'timeForm', action='/servers/' + guild.id + '/time', method='POST')
        .row 
            .col-2
                .container
                    h2 #{settings[0].term}
                    p.small Summary: #{settings[0].description}.
                    p.small#currAutoMonth(style={'font-style': 'italic'}) Currently: #{conv1}
                    hr  
                    label(for='autoMonth') Choose an option:
                        select#autoMonth
                            option(value='none') -
                            option(value='false') false
                            option(value='true') true
            .col-2
                .container
                    h2 #{settings[1].term}
                    p.small Summary: #{settings[1].description}.
                    p.small#currTime(style={'font-style': 'italic'}) Currently: #{conv2}
                    hr
                    label(for='time') Choose a time:
                        select#time
                            option(value='none') -
                            option(value='off') Off
                            option(value='tenAM') 10:00 AM
                            option(value='elevenAM') 11:00 AM
                            option(value='twelvePM') 12:00 PM
                            option(value='onePM') 1:00 PM
                            option(value='twoPM') 2:00 PM
                            option(value='threePM') 3:00 PM
                            option(value='fourPM') 4:00 PM
            .col-2
                .container
                    h2 #{settings[2].term}
                    p.small Summary: #{settings[2].description}.
                    p.small#currAmount(style={'font-style': 'italic'}) Currently: #{data['Boost Time Limit']} hrs
                    hr
                    label(for='amount') Choose an amount:
                        select#amount
                            option(value='none') -
                            option(value='oneHR') 1 Hour
                            option(value='twoHRs') 2 Hours
                            option(value='threeHRs') 3 Hours
                            option(value='fourHRs') 4 Hours
                            option(value='fiveHRs') 5 Hours
                            option(value='sixHRs') 6 Hours
        input(type='submit', value = 'save') 

mixin rankMult(settings, data)
    form#rankMForm(name = 'rankMForm', action='/servers/' + guild.id + '/rankM', method='POST')
        .row
            .col-1(style={'align-content': 'center'})
                    .container
                        h2 #{settings[0].term}
                        p.small Summary: #{settings[0].description}.
                        p.small#currRankEqual(style={'font-style': 'italic'}) Currently: #{data['Rank Multipliers']['Equal']}
                        hr
                        label(for='equalRank') Equal Rank Multiplier:
                        input#equalRank(name = 'equalRank', type='number', input='equalRank', min = '0', step = '0.1')
            .col-1(style={'align-content': 'center'})
                    .container
                        h2 #{settings[1].term}
                        p.small Summary: #{settings[1].description}.
                        p.small#currRank1Higher(style={'font-style': 'italic'}) Currently: #{data['Rank Multipliers']['One Higher']}
                        hr
                        label(for='oneHigherRank') One Rank Higher:
                        input#oneHigherRank(name = 'oneHigherRank', type='number', input='oneHigherRank', min = '0', step = '0.1')
            .col-1(style={'align-content': 'center'})
                    .container
                        h2 #{settings[2].term}
                        p.small Summary: #{settings[2].description}.
                        p.small#currRank2Higher(style={'font-style': 'italic'}) Currently: #{data['Rank Multipliers']['Two Higher']}
                        hr
                        label(for='twoHigherRanks') Two Ranks Higher:
                        input#twoHigherRanks(name = 'twoHigherRanks', type='number', input='twoHigherRanks', min = '0', step = '0.1')
            .col-1(style={'align-content': 'center'})
                    .container
                        h2 #{settings[3].term}
                        p.small Summary: #{settings[3].description}.
                        p.small#currRank1Lower(style={'font-style': 'italic'}) Currently: #{data['Rank Multipliers']['One Lower']}
                        hr
                        label(for='oneLowerRank') One Rank Lower:
                        input#oneLowerRank(name = 'oneLowerRank', type='number', input='oneLowerRank', min = '0', step = '0.1')
            .col-1(style={'align-content': 'center'})
                    .container
                        h2 #{settings[4].term}
                        p.small Summary: #{settings[4].description}.
                        p.small#currRank2Lower(style={'font-style': 'italic'}) Currently: #{data['Rank Multipliers']['Two Lower']}
                        hr
                        label(for='twoLowerRanks') Two Ranks Lower:
                        input#twoLowerRanks(name = 'twoLowerRanks', type='number', input='twoLowerRanks', min = '0', step = '0.1')
        input(type='submit', value = 'save') 

mixin tierMult(settings, data)
    form#tierMForm(name = 'tierMForm', action='/servers/' + guild.id + '/tierM', method='POST')
        .row
            .col-1(style={'align-content': 'center'})
                    .container
                        h2 #{settings[0].term}
                        p.small Summary: #{settings[0].description}.
                        p.small#currTierEqual(style={'font-style': 'italic'}) Currently: #{data['Tier Multipliers']['Equal']}
                        hr
                        label(for='equalTier') Equal Tier Multiplier:
                        input#equalTier(name = 'equalTier', type='number', input='equalTier', min = '0', step = '0.1')
            .col-1(style={'align-content': 'center'})
                    .container
                        h2 #{settings[1].term}
                        p.small Summary: #{settings[1].description}.
                        p.small#currTier1Higher(style={'font-style': 'italic'}) Currently: #{data['Tier Multipliers']['One Higher']}
                        hr
                        label(for='oneHigherTier') One Tier Higher:
                        input#oneHigherTier(name = 'oneHigherTier', type='number', input='oneHigherTier', min = '0', step = '0.1')
            .col-1(style={'align-content': 'center'})
                    .container
                        h2 #{settings[2].term}
                        p.small Summary: #{settings[2].description}.
                        p.small#currTier2Higher(style={'font-style': 'italic'}) Currently: #{data['Tier Multipliers']['Two Higher']}
                        hr
                        label(for='twoHigherTiers') Two Tiers Higher:
                        input#twoHigherTiers(name = 'twoHigherTiers', type='number', input='twoHigherTiers', min = '0', step = '0.1')
            .col-1(style={'align-content': 'center'})
                    .container
                        h2 #{settings[3].term}
                        p.small Summary: #{settings[3].description}.
                        p.small#currTier1Lower(style={'font-style': 'italic'}) Currently: #{data['Tier Multipliers']['One Lower']}
                        hr
                        label(for='oneLowerTier') One Tier Lower:
                        input#oneLowerTier(name = 'oneLowerTier', type='number', input='oneLowerTier', min = '0', step = '0.1')
            .col-1(style={'align-content': 'center'})
                    .container
                        h2 #{settings[4].term}
                        p.small Summary: #{settings[4].description}.
                        p.small#currTier2Lower(style={'font-style': 'italic'}) Currently: #{data['Tier Multipliers']['Two Lower']}
                        hr
                        label(for='twoLowerTiers') Two Tiers Lower:
                        input#twoLowerTiers(name = 'twoLowerTiers', type='number', input='twoLowerTiers', min = '0', step = '0.1')
        input(type='submit', value = 'save')

mixin teamMult(settings, data)
    form#teamMForm(name = 'teamMForm', action='/servers/' + guild.id + '/teamM', method='POST')
        .row
            .col-1(style={'align-content': 'center'})
                    .container
                        h2 #{settings[0].term}
                        p.small Summary: #{settings[0].description}.
                        p.small#currTeamEqual(style={'font-style': 'italic'}) Currently: #{data['Team Multipliers']['Equal']}
                        hr
                        label(for='equalTeam') Equal Team Multiplier:
                        input#equalTeam(name = 'equalTeam', type='number', input='equalTeam', min = '0', step = '0.1')
            .col-1(style={'align-content': 'center'})
                    .container
                        h2 #{settings[1].term}
                        p.small Summary: #{settings[1].description}.
                        p.small#currTeam1Higher(style={'font-style': 'italic'}) Currently: #{data['Team Multipliers']['One Higher']}
                        hr
                        label(for='oneHigherTeam') One Team Tier Higher:
                        input#oneHigherTeam(name = 'oneHigherTeam', type='number', input='oneHigherTeam', min = '0', step = '0.1')
            .col-1(style={'align-content': 'center'})
                    .container
                        h2 #{settings[2].term}
                        p.small Summary: #{settings[2].description}.
                        p.small#currTeam2Higher(style={'font-style': 'italic'}) Currently: #{data['Team Multipliers']['Two Higher']}
                        hr
                        label(for='twoHigherTeams') Two Team Tiers Higher:
                        input#twoHigherTeams(name = 'twoHigherTeams', type='number', input='twoHigherTeams', min = '0', step = '0.1')
            .col-1(style={'align-content': 'center'})
                    .container
                        h2 #{settings[3].term}
                        p.small Summary: #{settings[3].description}.
                        p.small#currTeam1Lower(style={'font-style': 'italic'}) Currently: #{data['Team Multipliers']['One Lower']}
                        hr
                        label(for='oneLowerTeam') One Team Tier Lower:
                        input#oneLowerTeam(name = 'oneLowerTeam', type='number', input='oneLowerTeam', min = '0', step = '0.1')
            .col-1(style={'align-content': 'center'})
                    .container
                        h2 #{settings[4].term}
                        p.small Summary: #{settings[4].description}.
                        p.small#currTeam2Lower(style={'font-style': 'italic'}) Currently: #{data['Team Multipliers']['Two Lower']}
                        hr
                        label(for='twoLowerTeams') Two Team Tiers Lower:
                        input#twoLowerTeams(name = 'twoLowerTeams', type='number', input='twoLowerTeams', min = '0', step = '0.1')
        input(type='submit', value = 'save')

mixin icons(settings, data)
   - var driveUrl = "https://drive.google.com/thumbnail\\?id=.*|https://drive.google.com/uc\\?export=download&id=.*|none"
    form#iconsForm(name = 'iconsForm', action='/servers/' + guild.id + '/icons', method='POST')  
        -currVal
        .row
            .col-2
                .container
                    h2 #{settings[0].term}
                    p.small Summary: #{settings[0].description}.
                    if data['Matchmaking Icon'] === 'https://drive.google.com/thumbnail?id='
                        -currVal = 'None'
                    else 
                        -currVal = data['Matchmaking Icon']
                    p.small#currMatchmaking(style={'font-style': 'italic'}) Currently: #{currVal}
                    hr
                    label(for='matchIcon') Matchmaking Icon:
                    br
                    input#matchIcon.pb-2(name = 'matchIcon', type='text', input='matchIcon', pattern = driveUrl) 
            .col-2
                .container
                    h2 #{settings[1].term}
                    p.small Summary: #{settings[1].description}.
                    if data['Boss Icon'] === 'https://drive.google.com/thumbnail?id='
                        -currVal = 'None'
                    else 
                        -currVal = data['Boss Icon']
                    p.small#currBoss(style={'font-style': 'italic'}) Currently: #{currVal}
                    hr
                    label(for='bossIcon') Boss Icon:
                    br
                    input#bossIcon.pb-2(name = 'bossIcon', type='text', input='bossIcon', pattern = driveUrl)
            .col-2
                .container
                    h2 #{settings[2].term}
                    p.small Summary: #{settings[2].description}.
                    if data['Boss Win'] === 'https://drive.google.com/thumbnail?id='
                        -currVal = 'None'
                    else 
                        -currVal = data['Boss Win']
                    p.small#currBossWin(style={'font-style': 'italic'}) Currently: #{currVal}
                    hr
                    label(for='bossWinIcon') Boss Win Icon:
                    br
                    input#bossWinIcon.pb-2(name = 'bossWinIcon', type='text', input='bossWinIcon', pattern = driveUrl)
            .col-2
                .container
                    h2 #{settings[3].term}
                    p.small Summary: #{settings[3].description}.
                    if data['Boss Lose'] === 'https://drive.google.com/thumbnail?id='
                        -currVal = 'None'
                    else 
                        -currVal = data['Boss Lose']
                    p.small#currBossLose(style={'font-style': 'italic'}) Currently: #{currVal}
                    hr
                    label(for='bossLossIcon') Boss Loss Icon:
                    br
                    input#bossLossIcon.pb-2(name = 'bossLossIcon', type='text', input='bossLossIcon', pattern = driveUrl)
            .col-2
                .container
                    h2 #{settings[4].term}
                    p.small Summary: #{settings[4].description}.
                    if data['Store 1 Icon'] === 'https://drive.google.com/thumbnail?id='
                        -currVal = 'None'
                    else 
                        -currVal = data['Store 1 Icon']
                    p.small#currStore1(style={'font-style': 'italic'}) Currently: #{currVal}
                    hr
                    label(for='store1Icon') Store 1 Icon:
                    br
                    input#store1Icon.pb-2(name = 'store1Icon', type='text', input='store1Icon', pattern = driveUrl)
            .col-2
                .container
                    h2 #{settings[5].term}
                    p.small Summary: #{settings[5].description}.
                    if data['Store 2 Icon'] === 'https://drive.google.com/thumbnail?id='
                        -currVal = 'None'
                    else 
                        -currVal = data['Store 2 Icon']
                    p.small#currStore2(style={'font-style': 'italic'}) Currently: #{currVal}
                    hr
                    label(for='store2Icon') Store 2 Icon:
                    br
                    input#store2Icon.pb-2(name = 'store2Icon', type='text', input='store2Icon', pattern = driveUrl)
            .col-2
                .container
                    h2 #{settings[6].term}
                    p.small Summary: #{settings[6].description}.
                    if data['Store 3 Icon'] === 'https://drive.google.com/thumbnail?id='
                        -currVal = 'None'
                    else 
                        -currVal = data['Store 3 Icon']
                    p.small#currStore3(style={'font-style': 'italic'}) Currently: #{currVal}
                    hr
                    label(for='store3Icon') Store 3 Icon:
                    br
                    input#store3Icon.pb-2(name = 'store3Icon', type='text', input='store3Icon', pattern = driveUrl)
            .col-2
                .container
                    h2 #{settings[7].term}
                    p.small Summary: #{settings[7].description}.
                    if data['Team Store Icon'] === 'https://drive.google.com/thumbnail?id='
                        -currVal = 'None'
                    else 
                        -currVal = data['Team Store Icon']
                    p.small#currTeamStore(style={'font-style': 'italic'}) Currently: #{currVal}
                    hr
                    label(for='teamStoreIcon') Team Store Icon:
                    br
                    input#teamStoreIcon.pb-2(name = 'teamStoreIcon', type='text', input='teamStoreIcon', pattern = driveUrl)
        input(type='submit', value = 'save')



mixin generateTeamTable(allTeams)
    - var count = 0
    each team in allTeams
        -count++
        tr 
            th(scope='row') #{count}
            td #{team['Team Name']} 
            td #{team['Points']}
            td #{team['Tier']}
            if team['Team Flag'] === 'https://drive.google.com/thumbnail?id='
                td No
            else 
               td Yes
            td.text-center
                a.btn.btn-primary.me-2(href='edit/'+ team['Team Name'], role='button') Edit
                button.btn.btn-primary(type='button', data-bs-toggle='modal', data-bs-target= '#modal' + count)
                    | Delete
                .modal.fade(id = 'modal' + count ,tabindex='-1', aria-labelledby = '#modalLabel' + count, aria-hidden='true')
                    .modal-dialog
                        .modal-content
                            .modal-header
                                h5(id = 'modalLabel' + count).modal-title Delete Team
                                button.btn-close(type='button', data-bs-dismiss='modal', aria-label='Close')
                            .modal-body
                                | Are you sure you want to delete the team called 
                                strong #{team['Team Name']}?
                            .modal-footer
                                button.btn.btn-secondary(type='button', data-bs-dismiss='modal') Close
                                a.button.btn.btn-primary(href='delete/'+ team['Team Name'], type='button') Confirm

- var count = 0
mixin generateStoreTable(store)
    a#editStore.btn.btn-primary.me-2(href='/servers/' + guild.id + '/makeItem/'+ store['Name'], role='button') 
        i.fas.fa-plus New Item
    each item in store['Items']
        -count++
        tr 
            th(scope='row') #{item['Number']}
            td #{item['Name']} 
            td #{item['Qty']}
            td #{item['Cost']}
            td #{item['Available']}
            td.text-center 
                a#editStore.btn.btn-primary.me-2(href='editStore/'+ store['Name'] + '/' + item['Number'], role='button') Edit
                button#deleteBtn.btn.btn-primary(type='button', data-bs-toggle='modal', data-bs-target='#modal' + count)
                    | Delete
                .modal.fade(id = 'modal' + count,tabindex='-1', aria-labelledby='#modalLabel' + count, aria-hidden='true')
                    .modal-dialog
                        .modal-content
                            .modal-header
                                h5(id = 'modalLabel' + count).modal-title Delete Item
                                button.btn-close(type='button', data-bs-dismiss='modal', aria-label='Close')
                            .modal-body
                                | Are you sure you want to delete item # 
                                strong #{item['Number']} from 
                                 strong #{store['Name']}
                            .modal-footer
                                button.btn.btn-secondary(type='button', data-bs-dismiss='modal') Close
                                a.button.btn.btn-primary(href='delete/'+ store['Name'] + '/' + item['Number'], type='button') Confirm
    if store['Name'] === 'Team Store'
        -count = 0            


                  
mixin generateProgramTable(programs)
    - var count = 0
    each program in programs['Programs']
        -count++
        tr 
            th(scope='row') #{count}
            td #{program['Name']} 
            td #{program['Factor']}
            if program['Bonus Type'] === 0
                td No Bonus
            else if program['Bonus Type'] === 1
                td Full Attendance Bonus
            else 
                td Partial Attendance Bonus
            td #{program['Bonus Amount']}
            td.text-center
                a.btn.btn-primary.me-2(href='editprogram/'+ count, role='button') Edit
                button.btn.btn-primary(type='button', data-bs-toggle='modal', data-bs-target= '#modal' + count)
                    | Delete
                .modal.fade(id = 'modal' + count ,tabindex='-1', aria-labelledby = '#modalLabel' + count, aria-hidden='true')
                    .modal-dialog
                        .modal-content
                            .modal-header
                                h5(id = 'modalLabel' + count).modal-title Delete Team
                                button.btn-close(type='button', data-bs-dismiss='modal', aria-label='Close')
                            .modal-body
                                | Are you sure you want to delete the 
                                strong #{program['Name']} Program?
                            .modal-footer
                                button.btn.btn-secondary(type='button', data-bs-dismiss='modal') Close
                                a.button.btn.btn-primary(href='deleteprogram/'+ count, type='button') Confirm